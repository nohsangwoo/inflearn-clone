generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  /// 이메일
  email             String     @unique
  /// 생성일
  createdAt         DateTime   @default(now())
  /// 소개
  description       String?
  /// 이메일 인증 여부
  isVerified        Boolean    @default(false)
  /// 닉네임
  nickname          String?
  /// 전화번호
  phoneNumber       String?
  /// 주소
  profileAddress    String?
  /// 프로필 이미지
  profileImageUrl   String?
  /// 역할
  role              Role       @default(STUDENT)
  /// 수정일
  updatedAt         DateTime   @updatedAt
  /// Supabase Auth에서 생성된 고유 사용자 ID (UUID 형식)
  supabaseId        String     @unique
  /// 장바구니
  Cart              Cart[]
  /// 제작한 강의
  createdLectures   Lecture[]  @relation("InstructorLectures")
  /// 좋아요
  Likes             Like[]
  /// 구매한 강의
  purchasedLectures Purchase[]
  /// 리뷰
  Reviews           Review[]
}

model Lecture {
  id            Int          @id @default(autoincrement())
  /// 강의 제목
  title         String
  /// 강의 설명
  description   String?
  /// 강의 가격
  price         Int
  /// 강의 할인 가격
  discountPrice Int?
  /// 강의 활성 여부
  isActive      Boolean      @default(true)
  /// 강의 이미지
  imageUrl      String?
  /// 생성일
  createdAt     DateTime     @default(now())
  /// 수정일
  updatedAt     DateTime     @updatedAt
  /// 강의 제작자
  instructorId  Int?
  /// 강의 커리큘럼 (사실상 1:1인데 여지를 남겨둠)
  Curriculums   Curriculum[]
  instructor    User?        @relation("InstructorLectures", fields: [instructorId], references: [id])
  /// 좋아요
  Likes         Like[]
  /// 구매 기록
  purchases     Purchase[]
  /// 리뷰
  Reviews       Review[]
  /// 장바구니
  Cart          Cart[]       @relation("CartToLecture")
}

model Review {
  id        Int      @id @default(autoincrement())
  /// 리뷰 내용
  content   String
  /// 리뷰 평점
  rating    Int
  /// 생성일
  createdAt DateTime @default(now())
  /// 수정일
  updatedAt DateTime @updatedAt
  /// 리뷰 작성자
  userId    Int?
  /// 강의 ID
  lectureId Int?
  /// 부모 댓글 ID
  parentId  Int?
  /// 삭제된 댓글 표시
  isDeleted Boolean  @default(false)
  /// 강의
  Lecture   Lecture? @relation(fields: [lectureId], references: [id])
  /// 부모 댓글
  parent    Review?  @relation("ReviewToReview", fields: [parentId], references: [id])
  /// 대댓글 목록
  replies   Review[] @relation("ReviewToReview")
  /// 리뷰 작성자
  User      User?    @relation(fields: [userId], references: [id])
}

model Cart {
  /// 장바구니 ID
  id        Int       @id @default(autoincrement())
  /// 생성일
  createdAt DateTime  @default(now())
  /// 수정일
  updatedAt DateTime  @updatedAt
  /// 장바구니 소유자
  userId    Int?
  User      User?     @relation(fields: [userId], references: [id])
  /// 장바구니 안에 들어있는 강의
  Lecture   Lecture[] @relation("CartToLecture")
}

model Like {
  /// 좋아요 ID
  id        Int      @id @default(autoincrement())
  /// 생성일
  createdAt DateTime @default(now())
  /// 수정일
  updatedAt DateTime @updatedAt
  /// 강의 ID
  lectureId Int?
  /// 좋아요 소유자
  userId    Int?
  /// 강의
  Lecture   Lecture? @relation(fields: [lectureId], references: [id])
  /// 좋아요 소유자
  User      User?    @relation(fields: [userId], references: [id])
}

model Curriculum {
  id                 Int                 @id @default(autoincrement())
  /// 생성일
  createdAt          DateTime            @default(now())
  /// 수정일
  updatedAt          DateTime            @updatedAt
  /// 강의 ID
  lectureId          Int?
  /// 강의
  Lecture            Lecture?            @relation(fields: [lectureId], references: [id])
  /// 강의 커리큘럼 섹션
  CurriculumSections CurriculumSection[]
}

model CurriculumSection {
  id           Int         @id @default(autoincrement())
  /// 강의 커리큘럼 섹션 제목
  title        String
  /// 강의 커리큘럼 섹션 설명
  description  String?
  /// 생성일
  createdAt    DateTime    @default(now())
  /// 수정일
  updatedAt    DateTime    @updatedAt
  /// 강의 커리큘럼 섹션 ID
  curriculumId Int?
  /// 강의 커리큘럼 섹션 활성 여부
  isActive     Boolean     @default(true)
  /// 강의 커리큘럼
  Curriculum   Curriculum? @relation(fields: [curriculumId], references: [id])
  /// 강의 커리큘럼 섹션 파일
  Files        File[]
  /// 사실상 1:1인데 여지를 남겨둠
  Videos       Video[]
}

model Video {
  id                  Int                @id @default(autoincrement())
  /// 강의 커리큘럼 섹션 동영상 제목
  title               String?
  /// 강의 커리큘럼 섹션 동영상 설명
  description         String?
  /// 강의 커리큘럼 섹션 동영상 URL
  videoUrl            String
  /// 강의 커리큘럼 섹션 동영상 썸네일 URL
  thumbnailUrl        String?
  /// 강의 커리큘럼 섹션 동영상 재생 시간
  duration            Int?
  /// 강의 커리큘럼 섹영상 언어
  language            Language           @default(KO)
  /// 생성일
  createdAt           DateTime           @default(now())
  /// 수정일
  updatedAt           DateTime           @updatedAt
  /// 강의 커리큘럼 섹션 ID
  curriculumSectionId Int?
  /// s3 key: assets/{id}/master.m3u8
  masterKey           String
  DubTrack            DubTrack[]
  /// 강의 커리큘럼 섹션
  CurriculumSection   CurriculumSection? @relation(fields: [curriculumSectionId], references: [id])
}

model DubTrack {
  id        String   @id @default(cuid())
  lang      String
  /// queued|processing|ready|failed
  status    String
  lufs      Float?
  /// sync compensation
  offsetMs  Int?
  /// 생성일
  createdAt DateTime @default(now())
  /// 수정일
  updatedAt DateTime @updatedAt
  videoId   Int?
  url       String?
  Video     Video?   @relation(fields: [videoId], references: [id])

  @@unique([videoId, lang])
}

model File {
  id                  Int                @id @default(autoincrement())
  url                 String
  /// 생성일
  createdAt           DateTime           @default(now())
  /// 수정일
  updatedAt           DateTime           @updatedAt
  /// 강의 커리큘럼 섹션 ID
  curriculumSectionId Int?
  CurriculumSection   CurriculumSection? @relation(fields: [curriculumSectionId], references: [id])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  lectureId Int
  /// 진행률 (0-100)
  progress  Float    @default(0)
  /// 수정일
  updatedAt DateTime @updatedAt
  /// 생성일
  createdAt DateTime @default(now())
  /// 강의
  lecture   Lecture  @relation(fields: [lectureId], references: [id])
  /// 구매자
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, lectureId])
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum Language {
  /// 언어 코드 설명:
  /// KO: 한국어, EN: 영어, JA: 일본어, VI: 베트남어, RU: 러시아어,
  /// ZH: 중국어, ZH_CN: 중국어(중국), ZH_TW: 중국어(대만), FR: 프랑스어,
  /// DE: 독일어, ES: 스페인어, PT: 포르투갈어, IT: 이탈리아어,
  /// ID: 인도네시아어, TH: 태국어, HI: 힌디어, AR: 아랍어,
  /// TR: 터키어, PL: 폴란드어, UK: 우크라이나어
  KO
  EN
  JA
  VI
  RU
  ZH
  ZH_CN
  ZH_TW
  FR
  DE
  ES
  PT
  IT
  ID
  TH
  HI
  AR
  TR
  PL
  UK
}
